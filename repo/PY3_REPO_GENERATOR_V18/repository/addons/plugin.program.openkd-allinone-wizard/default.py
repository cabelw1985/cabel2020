# Embedded file
"""
 
You are not allowed to Modify, Share or Sell this Code, just for personal use !

#


#empty




execute(default.py)





































"""
import sys, xbmc, os, time, base64
help = '=='+''+''+''+'rlQCJkQCJkgClVnb'+''+'cyVmdkxWa1J2JoMFdldmL6l2dg0DIgACIg40TJNlUFZFRMlUVCpQKnUmcv52Zp5WarNHdsVXYmVGZngyU0V2ZuoXa3BSPgACIgUkUP50RJRFTVFkRFRkCpcSZtFmbul2azRHb1FmZlR2JoMFdldmL6l2dg0DIgACIgASRNFkTUxUVBZUREpQKn4WarNHdsVXYmVGZngyU0V2ZuoXa3BSPgACIgACIOl0STRFTVFkRFRkCpcSZtFmbkxWa1J2JoMFdldmL6l2dg0DIgACIgACIgUUTB5ERMlUVCpQKoIXaE5WarNFdldmLj1mY4BSPgACIgACIgACIgACIg4USLNlCpcyZvxmLkJXY6l2dnACLBRVQE50TERUQo4WavpmLoRXYw5ycvBSPgACIgACIgACIgAyRPxkWJdlCpcCdyF2JgwyJzV2YyV3bzVmcnACLIRVQQ50TERUQo4WavpmLoRXYw5ycvBSPgACIgACIgACIgACIgACVSFkCpcyZuBnLu92YpdCIsgEVBBlTPRERBhibp9maugGdhBnLz9GI9ACIgACIgACIgACIgAiTPNUSKkyJnBnauQnch5WYmdCIsgEVBBlTPRERBhibp9maugGdhBnLz9GI9ACIgACIgACIgACIUJVQOFkRKkyJlNXYiFGdhR0JgACLBRVQEJVRTVFKul2bq5Ca0FGcuM3bg0DIgACIgACIgASRTFkQBRVQEpQKnMHbpFmbi1WdoR1JgACLBRVQEJVRTVFKul2bq5Ca0FGcuM3bg0DIgACIgACIgACIgMlQNVFSUpQKnwWb45ycn5Wa0RXZzlWdndCIgwSQUFERSV0UVhibp9maugGdhBnLz9GI9ACIgACIgM1ROlEVUV0UJV1RKkyJs1GeuMXZslmZvJHcnACIsEEVBRkUFNVVo4WavpmLoRXYw5ycvBSPgACIgACIgACITVETJZ0TSBlCpcCbthnLzVGdpJXdvZXYmdCIgwSQUFERSV0UVhibp9maugGdhBnLz9GI9ACIgACIgAyUFRVSSV1TWFkRKkyJs1GeuMXZjJXdvN3JgACLBRVQEJVRTVFKul2bq5Ca0FGcuM3bg0DIgACIgACIgACITV0QSV1TTpQKnwWb45ycn5Wa0RXZzRWZj5WY2RWYnACIsEEVBRkUFNVVo4WavpmLoRXYw5ycvBSPgACIgACIgACIEV0QOFkVEFkCpQUSf50TERUQgwyJhRXYk9lbvRGZhdCIgwSQUFERSV0UVhibp9maugGdhBnLz9GI9ACIgACIgACIBRVQE50TERUQKkyJhRXYk9lbvRGZhdCIgwSQUFERSV0UVhibp9maugGdhBnLz9GI9ACIgACIgACIgACIE50TERUQKkyJzV2Zht2YhB3JgACIgwyUO9EREFEKul2bq5Ca0FGcuM3bg0DIgACIgACIgAyUFdUQLNUQQpQKEl0XO9EREFEIgACIsMlTPRERBhibp9maugGdhBnLz9GI9ACIgACIgACIgACIOl0RVxEUKkyJhRXYkJXZzV3JgACIgACIsUUTPhEKul2bq5Ca0FGcuM3bg0DIgACIgACIgASQUFERSV0UVpQKnMnbvRGZhdCIgACIgACLF10TIhibp9maugGdhBnLz9GI9ACIgACIgACIgACIT50TERUQKkyJvUGbpZ2byB3LvoDbhl2YlB3cngCa0FGUlRXYsNnbhJHduMWbihHI9ACIgACIgACIgASRMlkRPJFUKkyJvgGdhB3Zvx2LvoDbhl2YlB3cngCa0FGUlRXYsNnbhJHduMWbihHI9ACIgACIgACIgACIgACIH9ETKkyJvUWbvh2LvoDbhl2YlB3cngCa0FGUlRXYsNnbhJHduMWbihHI9ACIgACIgACIgACIgASRN9ESKkCKzNXZyd2byB1ZvxWYpRkLpV3Zj1mY4BSPgACIgACIgACIgACIgACIQRkCpgyZvxWYpRkLpV3Zj1mY4BSPgACIgACIgACIgAyRPxUQJRkCpcCa0FGcnwCRJ9lTPRERBhybm5WSu9GZkFmL6l2dg0DIgACIgACIggEVBBlTPRERBpQKn42bpNnclZ3JsQUSf50TERUQo8mZulkbvRGZh5iepdHI9ACIgACIgACIgAiTPl0USVkVKkCRJ9lTPRERBhCZJ52bkRWYuoXa3BSPgACIgACIgACIgACIO9EREFkCFxEVJRlTPRERB5ichZnclNXdg0DIgACIgACIFxEVJRlTPRERBpARJ9lTPRERB5ichZnclNXdg0DIgACIgACIgACRJ9lTPRERBpgCpkyJ0AXbu8mc05WavMXZjJXdvNXZy9CZyFmepdXLl52bulGbsFWLktmblB3bu0WYyd2byBnLul2Z1xGcvMnbvRGZh9SZt9Gav8iOsFWajVGczdCKul2bq5Ca0FGcuM3bogGdhBVZ0FGbz5WYyRnLj1mY4BSPg8kUU5USKoQZslmZwlmegMXYgUGbpZGcppHdlhXamxiepdHIzFGIkJXY6l2dgwCd5BCLn9GTkF2bsBXdgwCajRXa3Nlbpt2cgwCdpR3ahJHdgwCdpRWayJWZkBCL5ZWa09mbgwiclRWYvxmb39GZgwCdjFmc0hXZgQncvBXbpBycilGbuMXZjJXdvNXZyBSbvJnZK4WavpGbyVHI0J3bw1WagU2cyFGcsJXdg02byZmChRHblRWZtlGdgwSZtlGdlRXYkBCLlRXYkBCdy9GctlGIl1Wa0VGdhRGIt9mcmpQZzFmYhRXYkBychBiMpBXYiRGI0J3bw1WagITZ0lGbxNXewBSbvJnZ6QHclNGelpQZzFmYhRXYkBychBiMpBXYiRGI0J3bw1WagMTZ0lGbxNHIt9mcmpTeyRnCoNGdh1mbmBCdy9GctlmCyFmdyV2c1BCdy9GctlmClJHI0J3bw1WaKIWasxmc1xiMilGbsJXdgQncvBXbppAbpRXdoNHI0J3bw1WaKI2bsdGIsMnZ2NWbihHIsMXezBCLz9GIs4WanVHbwNWbihHIskWdnNWbihHIs42bkRWYj1mY4BCLj1mY4BCdy9GctlmCKMyIjMyIjMyIjMyIjMyIjMyIjMyIjMyIjMyIjMyIjMyIjMyIjMyIjMyIjMyIjMyIjMyIjMyIjMyIjMyIjMyIjMyIjMyIjMyIjMyIjMyIjMyIKMCIgACIgACIgASOxAjMuATMg8CIwV3bydEItACdy9GcwV3UgQ0SuVGcPBSeiBCZllmZpR2btBCIgACIgACIgACIgACIgACIgACIgACIgAyIKMCIgACIgACIgACIgACIgACIgACIgACIgACIgACIgACIgACIgACIgACIs1Gdo5Cbwd2L0ZWZslHcvN2LnJ3buUnbn5yd3d3LvoDc0RHagAyIKMCIgACIgACIuE0UVBCL5MTMyADIB1EIsU2Zklmci1WYDBCLlZXQgM3ch1EI1cjNgwibvlGdhRmb19mRgUmchdHdm92UgUWZyZEIlhGdgAyIKMCIgACIgACIgACIgACIgACIgACIg8GdgUGdpJ3dgwCdv5GImlEIg4yROlUWQ90QgUGbpZGIlhGdgUWZzByOD1kQYBCa0l2dgcmbvxWYgAyIKMCIgACIgACIgACIgU2cuV2YpxEIjlGbiVHUgwWYyVmbldEIV50RgUGa0BiZvBSew92YgEGIkVmdpV2YlJHIlZXYoBCZsV3boNHI19WWgAyIKMCIgACIgACIgACIgACIgACIgACIgACIgACIgACIgACIgACIgACIgACIgACIgACIgACIgACIgACIgACIgACIgACIgACIgACIgACIgACIgAyIKMCIgACIgACIgACIgACIgACIgACIgACIgACIgACIgACIg4ycslWY0VGZgUmcv1GIy9mZgU2cuV2YpxEIjlGbiVHUgwWYyVmbldEIV50RgAyIKMCIgACIgACIgACIgACIgACIlhGdgUWZTBiLFN1TQJVVQBiUBxUVDlEVSFEUgEEIS9kRgM1UF5EVJZEIy9GIZRVSMlkQBRlTBh0QSVUTgAyIKMCIgACIgACIgACIgACIgY2bgkHduFmcyF2dgQWZpxGctlGIlhGdg4WZ2VGI0V3boRXa3ByOZRlTBJlUBdFIZ5UQgQVVPhEVJdFI0VnYgAyIKMCIgACIgACIgACIgACIswWdmV2c1BSZiBCbsl2dgQXagQXYoRHIlB3boBSZoRHIulGIkVGd1JWayR3cpRGIzlGItFmcn9mcQBycphGVgAyIKMCIgACIgACIgACIgACIgACIgACIgACIgACIgACIgACIgACIgACIgACIgACIgACIgACIgACIgACIgACIgACIgACIgACIgACIgACIgACIgAyIKMCIgACIgACIgACIgACIgACIgACIgACIgACIgACIgACIgACIgACIgACIgACIgACIgACIgACIgACIgACIu42bpNnclZHIyVGdhxGI55WYgAyIKMCIgACIgACIgASKu9Wa0B3bgIXdvlHI0FGKgI3bgwiMg42bpNnclZHIyVGa0lWZgsjbvlGdhRmb19mRgUmchdHdm92UgUWZyZEIlhGdgAyIKMCIgACIgACIgknYgQWZoNXasJWdwBychBSZz5WZjlGTgMWasJWdQBCbhJXZuV2RgUlTHBSZoRHIm9GIz1mclRHIlhGdgIXZk5WdgQXagAyIKMCIgACIgACIgknZpR2btBicv9CZuFGI0lGIlRXdilmc0NXakVmcg4WYjBSdvlHI7UmchdHdm92cgUWZyZGIzlGItFmcn9mcQBycphGVgAyIKMCIgACIgACIgACIgACIgACIgACIgACIgACIgACIgACIgACIgACIgACIgACIgACIgACIgACIgACIgACIgACIgACIgACIgACIgACIgACIgAyIKMCIgACIgACIgACIgACIgACIgACIgACIgACIgACIgACIgACIgACIgACIgACI4dmbpNWYmJXdTBSNxAjMgkyQoACdodWaylHcvNEIgACIgAyIKMyIjMyIjMyIjMyIjMyIjMyIjMyIjMyIjMyIjMyIjMyIjMyIjMyIjMyIjMyIjMyIjMyIjMyIjMyIjMyIjMyIjMyIjMyIjMyIjMyIjMyIjMyI'

exec base64.b64decode(help[::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1])